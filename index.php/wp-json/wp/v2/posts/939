{"id":939,"date":"2022-12-11T08:11:59","date_gmt":"2022-12-11T08:11:59","guid":{"rendered":"https:\/\/plainswipe.com\/?p=939"},"modified":"2022-12-11T08:11:59","modified_gmt":"2022-12-11T08:11:59","slug":"how-to-use-rlhf-to-train-a-model-to-generate-code-that-compiles-tutorial","status":"publish","type":"post","link":"http:\/\/localhost:8000\/index.php\/how-to-use-rlhf-to-train-a-model-to-generate-code-that-compiles-tutorial\/","title":{"rendered":"How to use RLHF to train a model to generate code that compiles (Tutorial)"},"content":{"rendered":"<style>.kb-table-of-content-nav.kb-table-of-content-id_143206-61 .kb-table-of-content-wrap{padding-top:var(--global-kb-spacing-sm, 1.5rem);padding-right:var(--global-kb-spacing-sm, 1.5rem);padding-bottom:var(--global-kb-spacing-sm, 1.5rem);padding-left:var(--global-kb-spacing-sm, 1.5rem);}.kb-table-of-content-nav.kb-table-of-content-id_143206-61 .kb-table-of-contents-title-wrap{padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px;}.kb-table-of-content-nav.kb-table-of-content-id_143206-61 .kb-table-of-contents-title{font-weight:regular;font-style:normal;}.kb-table-of-content-nav.kb-table-of-content-id_143206-61 .kb-table-of-content-wrap .kb-table-of-content-list{font-weight:regular;font-style:normal;margin-top:var(--global-kb-spacing-sm, 1.5rem);margin-right:0px;margin-bottom:0px;margin-left:0px;}<\/style>\n\n\n<h4 class=\"wp-block-heading\">Step 1: The Interpreter<\/h4>\n\n\n\n<p>Find or write an interpreter for the code that you want your model to generate. This is not just limited to code. It can be any kind of an interpreter.<\/p>\n\n\n\n<p>There are many different kinds of interpreters, but some common examples include:<\/p>\n\n\n\n<ol>\n<li>Programming language interpreters: These interpreters execute instructions written in a programming language, such as Python or C++.<\/li>\n\n\n\n<li>Command line interpreters: Also known as shell interpreters, these programs allow users to enter commands, execute programs, and manage their computer&#8217;s operating system from a command line interface (CLI).<\/li>\n\n\n\n<li>Database interpreters: These interpreters process and execute instructions written in a database query language, such as SQL.<\/li>\n\n\n\n<li>Markup language interpreters: These interpreters process and display instructions written in a markup language, such as HTML or XML.<\/li>\n\n\n\n<li>Regular expression interpreters: These interpreters process and evaluate strings of text according to a set of rules defined using regular expressions.<\/li>\n\n\n\n<li>Virtual machine interpreters: These interpreters execute instructions written in a virtual machine language, such as the Java Virtual Machine (JVM) language.<\/li>\n\n\n\n<li>Brainfuck interpreters: These interpreters execute instructions written in the esoteric programming language Brainfuck.<\/li>\n<\/ol>\n\n\n\n<h4 class=\"wp-block-heading\">Step 2: Reward Function<\/h4>\n\n\n\n<p>Here is an example :<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>def reward_fn(samples):\n    reward_list = &#91;]\n    for sample in samples:\n        code = sample.split(\"Function:\")&#91;1].strip()\n        output = eval(sample.split(\"Output:\")&#91;1].strip().split(\"Function:\")&#91;0].strip())\n        interpreted_output = interpreter(code)\n        if interpreted_output == \"ERROR\":\n            # If the code is unparsable, we give it a negative reward.\n            reward_list.append(-1)\n        else:\n            # if the code is parseable\n            if output == interpreted_output:\n                # if the output is correct, we give it a positive reward.\n                reward_list.append(1)\n            else:\n                # if the output is incorrect, we give it a negative reward.\n                reward_list.append(-0.5)\n\n    return reward_list<\/code><\/pre>\n\n\n\n<p>As you can see an interpreter is called, the output from the model i.e. the code generated is fed into the interpreter and the interpreted output is checked for errors. If no errors then the model gets a reward, otherwise a negative one.<\/p>\n\n\n\n<p>Refer to my <a href=\"https:\/\/plainswipe.com\/rlhf-tutorial-using-trlx\" data-type=\"post\" data-id=\"919\">previous post<\/a> to learn the basics RLHF training.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Step 1: The Interpreter Find or write an interpreter for the code that you want your model to generate. This is not just limited to code. It can be any kind of an interpreter. There are many different kinds of interpreters, but some common examples include: Step 2: Reward Function Here is an example :&hellip;&nbsp;<a href=\"http:\/\/localhost:8000\/index.php\/how-to-use-rlhf-to-train-a-model-to-generate-code-that-compiles-tutorial\/\" class=\"\" rel=\"bookmark\">Read More &raquo;<span class=\"screen-reader-text\">How to use RLHF to train a model to generate code that compiles (Tutorial)<\/span><\/a><\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"neve_meta_sidebar":"","neve_meta_container":"","neve_meta_enable_content_width":"","neve_meta_content_width":0,"neve_meta_title_alignment":"","neve_meta_author_avatar":"","neve_post_elements_order":"","neve_meta_disable_header":"","neve_meta_disable_footer":"","neve_meta_disable_title":"","_themeisle_gutenberg_block_has_review":false,"_ti_tpc_template_sync":false,"_ti_tpc_template_id":""},"categories":[5],"tags":[],"_links":{"self":[{"href":"http:\/\/localhost:8000\/index.php\/wp-json\/wp\/v2\/posts\/939"}],"collection":[{"href":"http:\/\/localhost:8000\/index.php\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"http:\/\/localhost:8000\/index.php\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"http:\/\/localhost:8000\/index.php\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"http:\/\/localhost:8000\/index.php\/wp-json\/wp\/v2\/comments?post=939"}],"version-history":[{"count":0,"href":"http:\/\/localhost:8000\/index.php\/wp-json\/wp\/v2\/posts\/939\/revisions"}],"wp:attachment":[{"href":"http:\/\/localhost:8000\/index.php\/wp-json\/wp\/v2\/media?parent=939"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"http:\/\/localhost:8000\/index.php\/wp-json\/wp\/v2\/categories?post=939"},{"taxonomy":"post_tag","embeddable":true,"href":"http:\/\/localhost:8000\/index.php\/wp-json\/wp\/v2\/tags?post=939"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}