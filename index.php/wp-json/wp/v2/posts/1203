{"id":1203,"date":"2023-03-02T09:59:58","date_gmt":"2023-03-02T09:59:58","guid":{"rendered":"https:\/\/plainswipe.com\/?p=1203"},"modified":"2023-03-02T09:59:58","modified_gmt":"2023-03-02T09:59:58","slug":"cost-saving-strategies-on-aws","status":"publish","type":"post","link":"http:\/\/localhost:8000\/index.php\/cost-saving-strategies-on-aws\/","title":{"rendered":"Cost Saving Strategies on AWS"},"content":{"rendered":"\n<p>As more and more businesses migrate to the cloud, optimizing cloud costs has become an essential part of managing their cloud infrastructure. In this article, we will discuss some cost-saving strategies for AWS that can help businesses reduce their cloud costs.<\/p>\n\n\n\n<h4 class=\"wp-block-heading\">Step 1: Use the cost explorer to discover the services that are taking most of your costs<\/h4>\n\n\n\n<p>The cost explorer is a tool in AWS that allows users to analyze and visualize their AWS costs and usage. It can help businesses identify which services are consuming the most resources and costing the most money. By analyzing this data, businesses can make informed decisions about which services to optimize or even shut down to reduce their costs.<\/p>\n\n\n\n<h4 class=\"wp-block-heading\">Step 2: Shut down inactive EC2 instances<\/h4>\n\n\n\n<p>EC2 instances are a significant cost in AWS, and businesses can save money by shutting down instances that are not being used. This can be achieved by setting up an email alert that informs the user if an instance is idle for greater than x% of the time. The user can then decide to shut down the instance manually or automate the process using AWS Lambda.<\/p>\n\n\n\n<h4 class=\"wp-block-heading\">Step 3: If you are using ECS, Adjust ECS task definitions based on CPU and Memory utilization<\/h4>\n\n\n\n<p>ECS is a container orchestration service in AWS that allows businesses to run and scale containerized applications. By analyzing the CPU and memory utilization of the tasks in the service, businesses can adjust the task definitions of the compute to have lesser CPUs or memory, reducing the cost of the service.<\/p>\n\n\n\n<h4 class=\"wp-block-heading\">Step 4: Move from ELB to Application Load Balancer<\/h4>\n\n\n\n<p>Elastic Load Balancer (ELB) is a service in AWS that distributes incoming traffic to multiple targets, such as EC2 instances, containers, or IP addresses. However, the cost of ELB can be significant, and businesses can save money by moving to Application Load Balancer (ALB), which offers more advanced features at a lower cost.<\/p>\n\n\n\n<p>Pros of using ALB include:<\/p>\n\n\n\n<ul>\n<li>More granular routing options<\/li>\n\n\n\n<li>Better support for containerized applications<\/li>\n\n\n\n<li>Native support for HTTP\/2 and WebSocket protocols<\/li>\n<\/ul>\n\n\n\n<h4 class=\"wp-block-heading\">Step 5: Consider using alternatives like NGINX for load balancing<\/h4>\n\n\n\n<p>Elastic Load Balancer (ELB) and NGINX are both popular load balancing solutions, but they differ in their approach and capabilities. Here is a comparison table that highlights the differences between ELB and NGINX:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><thead><tr><th>Feature<\/th><th>ELB<\/th><th>NGINX<\/th><\/tr><\/thead><tbody><tr><td>Cost<\/td><td>Can be expensive for larger deployments<\/td><td>Open-source, free, and paid options<\/td><\/tr><tr><td>Configuration<\/td><td>Limited configuration options<\/td><td>Flexible and customizable<\/td><\/tr><tr><td>Scalability<\/td><td>Can scale up and down automatically<\/td><td>Can scale up and down manually<\/td><\/tr><tr><td>Performance<\/td><td>Can handle high traffic volumes<\/td><td>Fast and efficient, high performance<\/td><\/tr><tr><td>SSL\/TLS Offloading<\/td><td>Supports SSL\/TLS offloading<\/td><td>Supports SSL\/TLS offloading<\/td><\/tr><tr><td>Health Checks<\/td><td>Supports basic health checks<\/td><td>Supports advanced health checks<\/td><\/tr><tr><td>Protocols<\/td><td>Supports HTTP, HTTPS, and TCP<\/td><td>Supports HTTP, HTTPS, and TCP<\/td><\/tr><tr><td>Customization<\/td><td>Limited customization options<\/td><td>Highly customizable<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>As you can see, both ELB and NGINX have their own strengths and weaknesses. ELB is a managed service, which means that AWS handles the infrastructure and management of the load balancer. However, this comes at a cost, and ELB can be expensive for larger deployments.<\/p>\n\n\n\n<h4 class=\"wp-block-heading\">How to setup NGINX for load balancing?<\/h4>\n\n\n\n<p>To set up NGINX for load balancing and auto scaling with ECS, businesses can follow these steps:<\/p>\n\n\n\n<ul>\n<li>Launch an ECS cluster and service<\/li>\n\n\n\n<li>Create a task definition with the NGINX container image<\/li>\n\n\n\n<li>Configure NGINX to load balance requests to the ECS service<\/li>\n\n\n\n<li>Set up auto scaling policies for the ECS service based on CPU or memory utilization<\/li>\n<\/ul>\n\n\n\n<ol start=\"7\">\n<li>Explore AWS Route 53 DNS-based load balancing<\/li>\n<\/ol>\n\n\n\n<p>AWS Route 53 is a DNS service that can be used to route traffic to multiple AWS resources, including EC2 instances, containers, and IP addresses. Businesses with a small number of instances can use Route 53\u2019s DNS-based load balancing to route traffic to their instances, reducing the cost of ELB or ALB.<\/p>\n\n\n\n<h4 class=\"wp-block-heading\">Step 5: Consider using Route 53 DNS based Load Balancing<\/h4>\n\n\n\n<p>If you have a small number of instances, you can use AWS Route 53 DNS-based load balancing to route traffic to your instances. This can be a cost-effective option for smaller applications. A tutorial with sample code can help you set up this service and optimize your usage of it.<\/p>\n\n\n\n<h4 class=\"wp-block-heading\">To set up Route 53 DNS-based load balancing, businesses can follow these steps:<\/h4>\n\n\n\n<ul>\n<li>Create a Route 53 hosted zone<\/li>\n\n\n\n<li>Add DNS records for the resources to be load balanced<\/li>\n\n\n\n<li>Create a health check for the resources<\/li>\n\n\n\n<li>Configure Route 53 to route traffic to the healthy resources<\/li>\n<\/ul>\n\n\n\n<h4 class=\"wp-block-heading\">Here&#8217;s a step-by-step tutorial on how to configure NGINX for load balancing and auto scaling if you are using ECS:<\/h4>\n\n\n\n<ol>\n<li>Launch an Amazon ECS cluster:<\/li>\n<\/ol>\n\n\n\n<p>First, launch an Amazon ECS cluster using the ECS optimized Amazon Machine Image (AMI). You can follow the instructions in the Amazon ECS documentation to create an ECS cluster.<\/p>\n\n\n\n<ol start=\"2\">\n<li>Create an ECS service:<\/li>\n<\/ol>\n\n\n\n<p>Next, create an ECS service that will run your application. You can follow the instructions in the Amazon ECS documentation to create an ECS service.<\/p>\n\n\n\n<ol start=\"3\">\n<li>Install NGINX:<\/li>\n<\/ol>\n\n\n\n<p>Once your ECS cluster and service are up and running, you can install NGINX on an EC2 instance that will act as the load balancer. You can follow the instructions in the NGINX documentation to install NGINX on an EC2 instance.<\/p>\n\n\n\n<ol start=\"4\">\n<li>Configure NGINX:<\/li>\n<\/ol>\n\n\n\n<p>Next, you need to configure NGINX to act as the load balancer for your ECS service. You can do this by creating an NGINX configuration file that specifies the IP addresses and ports of your ECS tasks.<\/p>\n\n\n\n<p>Example of SAMPLE NGINIX configuration file<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>http {\n    upstream ecs_cluster {\n        server &lt;ecs_task_ip_address_1&gt;:&lt;ecs_task_port&gt;;\n        server &lt;ecs_task_ip_address_2&gt;:&lt;ecs_task_port&gt;;\n        server &lt;ecs_task_ip_address_3&gt;:&lt;ecs_task_port&gt;;\n    }\n \n    server {\n        listen 80;\n \n        location \/ {\n            proxy_pass http:\/\/ecs_cluster;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        }\n    }\n}<\/code><\/pre>\n\n\n\n<p>In this configuration file, replace <code>&lt;ecs_task_ip_address&gt;<\/code> with the IP address of your ECS tasks, and <code>&lt;ecs_task_port&gt;<\/code> with the port number that your tasks are running on.<\/p>\n\n\n\n<p><\/p>\n\n\n\n<ol start=\"5\">\n<li>Configure auto scaling:<\/li>\n<\/ol>\n\n\n\n<p>Finally, you can configure auto scaling for your ECS service by creating an Amazon CloudWatch alarm that triggers when your ECS tasks exceed a certain CPU utilization threshold. When the alarm is triggered, it can automatically launch new ECS tasks to handle the increased load.<\/p>\n\n\n\n<p>You can follow the instructions in the Amazon ECS documentation to create an Amazon CloudWatch alarm and configure auto scaling for your ECS service.<\/p>\n\n\n\n<p>That&#8217;s it! With NGINX, you can configure load balancing and auto scaling for your ECS service to handle increased traffic and demand.<\/p>\n\n\n\n<p><\/p>\n\n\n\n<h4 class=\"wp-block-heading\">A target tracking scaling policy for an ECS service<\/h4>\n\n\n\n<p>Here&#8217;s an example of how you can create an Application Auto Scaling policy for scaling ECS tasks:<\/p>\n\n\n\n<ol>\n<li>Define a scalable target:<\/li>\n<\/ol>\n\n\n\n<pre class=\"wp-block-code\"><code>resource \"aws_appautoscaling_target\" \"ecs_target\" {\n  max_capacity       = 10\n  min_capacity       = 1\n  resource_id        = \"service\/${aws_ecs_service.my_service.name}\"\n  scalable_dimension = \"ecs:service:DesiredCount\"\n  service_namespace  = \"ecs\"\n}<\/code><\/pre>\n\n\n\n<p>This block of code defines an Application Auto Scaling target for an ECS service. The <code>resource_id<\/code> attribute specifies the ECS service to scale, while the <code>max_capacity<\/code> and <code>min_capacity<\/code> attributes define the maximum and minimum number of tasks to run.<\/p>\n\n\n\n<ol start=\"2\">\n<li>Define a scaling policy:<\/li>\n<\/ol>\n\n\n\n<pre class=\"wp-block-code\"><code>resource \"aws_appautoscaling_policy\" \"ecs_policy\" {\n  name               = \"ecs-scaling-policy\"\n  policy_type        = \"TargetTrackingScaling\"\n  resource_id        = \"${aws_appautoscaling_target.ecs_target.id}\"\n  scalable_dimension = \"ecs:service:DesiredCount\"\n\n  target_tracking_scaling_policy_configuration {\n    predefined_metric_specification {\n      predefined_metric_type = \"ECSServiceAverageCPUUtilization\"\n    }\n    target_value = 60.0\n  }\n}<\/code><\/pre>\n\n\n\n<p>This block of code defines an Application Auto Scaling policy for an ECS service. The <code>policy_type<\/code> attribute specifies that this is a target tracking scaling policy, which adjusts the number of tasks to maintain a target value for a specified metric. In this case, we are using the <code>ECSServiceAverageCPUUtilization<\/code> metric and setting a target value of 60%. This means that Application Auto Scaling will automatically adjust the number of tasks to maintain a CPU utilization of around 60%.<\/p>\n\n\n\n<p>3. Attach the policy to the target:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>resource \"aws_appautoscaling_policy_attachment\" \"ecs_attachment\" {\n  policy_arn = \"${aws_appautoscaling_policy.ecs_policy.arn}\"\n  target_arn = \"${aws_appautoscaling_target.ecs_target.arn}\"\n}<\/code><\/pre>\n\n\n\n<p>This block of code attaches the Application Auto Scaling policy to the ECS service target.<\/p>\n\n\n\n<p>With this setup, Application Auto Scaling will automatically adjust the number of ECS tasks running in response to changes in the specified metric (in this case, CPU utilization). This allows your application to automatically scale up and down to handle varying workloads without requiring manual intervention.<\/p>\n\n\n\n<p>Note that you can customize the metrics and target values to suit your specific use case. You can also create multiple Application Auto Scaling policies for the same target, each with different metrics and target values.<\/p>\n\n\n\n<h4 class=\"wp-block-heading\">Configure NGINX to act as a load balancer<\/h4>\n\n\n\n<p>To configure NGINX to act as a load balancer, you can follow these steps:<\/p>\n\n\n\n<ol>\n<li>Install NGINX: You can install NGINX on your server by using your package manager. For example, if you are using Ubuntu, you can use the following command to install NGINX:<\/li>\n<\/ol>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo apt-get update\nsudo apt-get install nginx\n<\/code><\/pre>\n\n\n\n<p>Configure NGINX as a load balancer: You can configure NGINX to act as a load balancer by editing the <code>\/etc\/nginx\/nginx.conf<\/code> file. Here is an example configuration for a simple load balancer that balances requests between two backend servers:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>http {\n    upstream backend {\n        server backend1.example.com;\n        server backend2.example.com;\n    }\n\n    server {\n        listen 80;\n        server_name example.com;\n\n        location \/ {\n            proxy_pass http:\/\/backend;\n        }\n    }\n}<\/code><\/pre>\n\n\n\n<p>In this configuration, the <code>upstream<\/code> directive defines a group of backend servers, and the <code>proxy_pass<\/code> directive in the <code>location<\/code> block directs requests to the backend servers.<\/p>\n\n\n\n<p>Restart NGINX: After editing the configuration file, you need to restart NGINX to apply the changes. You can use the following command to restart NGINX:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo systemctl restart nginx<\/code><\/pre>\n\n\n\n<p>Test the load balancer: To test the load balancer, you can use a tool like <code>curl<\/code> to send requests to the server. For example, you can use the following command to send a request to the load balancer:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>curl http:\/\/example.com<\/code><\/pre>\n\n\n\n<p>You should see a response from one of the backend servers.<\/p>\n\n\n\n<p>Configure ECS with task definitions and auto scaling<\/p>\n\n\n\n<p>To configure ECS with task definitions and auto scaling, you can follow these general steps:<\/p>\n\n\n\n<ol>\n<li>Create a task definition: A task definition is a blueprint for how to run a specific Docker container within a task. It specifies the Docker image to use, how much CPU and memory to allocate to the task, and other configuration details. You can create a task definition using the AWS Management Console or the AWS CLI.<\/li>\n\n\n\n<li>Create a service: A service is a long-running task that is automatically started and stopped by ECS. A service is associated with a task definition, and it can be configured to run a specific number of tasks (called the desired count). You can create a service using the AWS Management Console or the AWS CLI.<\/li>\n\n\n\n<li>Configure auto scaling: You can use the AWS Application Auto Scaling service to set up auto scaling for your ECS services. Auto scaling allows you to automatically increase or decrease the number of tasks in your service based on metrics like CPU usage or memory usage. To configure auto scaling, you&#8217;ll need to create an auto scaling target and a scaling policy. You can do this using the AWS Management Console or the AWS CLI.<\/li>\n<\/ol>\n\n\n\n<p>Here&#8217;s an example of how to create an ECS service with task definitions and auto scaling using the AWS Management Console:<\/p>\n\n\n\n<ol>\n<li>Create a task definition:\n<ul>\n<li>Go to the Amazon ECS console and choose &#8220;Task Definitions&#8221; from the left navigation pane.<\/li>\n\n\n\n<li>Choose &#8220;Create new Task Definition&#8221; and select &#8220;EC2&#8221; or &#8220;Fargate&#8221; depending on your requirements.<\/li>\n\n\n\n<li>Configure the task definition details like the container image, CPU, memory, port mappings, etc.<\/li>\n\n\n\n<li>Choose &#8220;Create&#8221; to save the task definition.<\/li>\n<\/ul>\n<\/li>\n\n\n\n<li>Create a service:\n<ul>\n<li>From the ECS console, select &#8220;Clusters&#8221; from the left navigation pane and choose the cluster you want to use.<\/li>\n\n\n\n<li>Choose &#8220;Create Service&#8221; and configure the service details like the task definition, desired count, and load balancer settings.<\/li>\n\n\n\n<li>Choose &#8220;Create Service&#8221; to save the service.<\/li>\n<\/ul>\n<\/li>\n\n\n\n<li>Configure auto scaling:\n<ul>\n<li>From the Amazon ECS console, choose &#8220;Clusters&#8221; from the left navigation pane and select the cluster you want to use.<\/li>\n\n\n\n<li>Choose the &#8220;Services&#8221; tab and select the service you want to set up auto scaling for.<\/li>\n\n\n\n<li>Choose the &#8220;Auto Scaling&#8221; tab and select &#8220;Configure Auto Scaling.&#8221;<\/li>\n\n\n\n<li>Choose the metrics to use for scaling, such as CPU utilization or memory usage.<\/li>\n\n\n\n<li>Configure the scaling policy, such as the minimum and maximum number of tasks to run.<\/li>\n\n\n\n<li>Choose &#8220;Create&#8221; to save the auto scaling configuration.<\/li>\n<\/ul>\n<\/li>\n<\/ol>\n\n\n\n<p>With these steps completed, ECS will automatically start and stop tasks as needed based on the scaling policies you&#8217;ve configured.<\/p>\n\n\n\n<p><\/p>\n\n\n\n<p>Here is an example Terraform code for configuring an ECS service to use the target group:<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">resource \"aws_ecs_service\" \"example\" {\n  name            = \"example-service\"\n  cluster         = aws_ecs_cluster.example.id\n  task_definition = aws_ecs_task_definition.example.arn\n  desired_count   = 2\n  \n  load_balancer {\n    target_group_arn = aws_lb_target_group.example.arn\n    container_name   = \"example-container\"\n    container_port   = 80\n  }\n}\n<\/pre>\n\n\n\n<p>here is an example of how to create an <code>aws_lb_target_group<\/code> resource in Terraform:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>resource \"aws_lb_target_group\" \"example\" {\n  name        = \"example-target-group\"\n  port        = 80\n  protocol    = \"HTTP\"\n  vpc_id      = aws_vpc.example.id\n\n  health_check {\n    path     = \"\/\"\n    protocol = \"HTTP\"\n  }\n}<\/code><\/pre>\n\n\n\n<p>This creates an <code>aws_lb_target_group<\/code> resource named &#8220;example-target-group&#8221; listening on port 80 using the HTTP protocol, and performing a health check by sending an HTTP request to the root path of the target. The target group is associated with the VPC identified by the <code>aws_vpc.example.id<\/code> variable.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>As more and more businesses migrate to the cloud, optimizing cloud costs has become an essential part of managing their cloud infrastructure. In this article, we will discuss some cost-saving strategies for AWS that can help businesses reduce their cloud costs. Step 1: Use the cost explorer to discover the services that are taking most&hellip;&nbsp;<a href=\"http:\/\/localhost:8000\/index.php\/cost-saving-strategies-on-aws\/\" class=\"\" rel=\"bookmark\">Read More &raquo;<span class=\"screen-reader-text\">Cost Saving Strategies on AWS<\/span><\/a><\/p>\n","protected":false},"author":1,"featured_media":1245,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"neve_meta_sidebar":"","neve_meta_container":"","neve_meta_enable_content_width":"","neve_meta_content_width":0,"neve_meta_title_alignment":"","neve_meta_author_avatar":"","neve_post_elements_order":"","neve_meta_disable_header":"","neve_meta_disable_footer":"","neve_meta_disable_title":"","_themeisle_gutenberg_block_has_review":false,"_ti_tpc_template_sync":false,"_ti_tpc_template_id":""},"categories":[1],"tags":[21,31,41,43],"_links":{"self":[{"href":"http:\/\/localhost:8000\/index.php\/wp-json\/wp\/v2\/posts\/1203"}],"collection":[{"href":"http:\/\/localhost:8000\/index.php\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"http:\/\/localhost:8000\/index.php\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"http:\/\/localhost:8000\/index.php\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"http:\/\/localhost:8000\/index.php\/wp-json\/wp\/v2\/comments?post=1203"}],"version-history":[{"count":0,"href":"http:\/\/localhost:8000\/index.php\/wp-json\/wp\/v2\/posts\/1203\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"http:\/\/localhost:8000\/index.php\/wp-json\/"}],"wp:attachment":[{"href":"http:\/\/localhost:8000\/index.php\/wp-json\/wp\/v2\/media?parent=1203"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"http:\/\/localhost:8000\/index.php\/wp-json\/wp\/v2\/categories?post=1203"},{"taxonomy":"post_tag","embeddable":true,"href":"http:\/\/localhost:8000\/index.php\/wp-json\/wp\/v2\/tags?post=1203"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}